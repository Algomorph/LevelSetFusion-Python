#  ================================================================
#  Created by Gregory Kramida on 1/11/19.
#  Copyright (c) 2019 Gregory Kramida
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#  ================================================================

# stdlib
from unittest import TestCase

# libraries
import numpy as np

# local
import math_utils.resampling as resampling
# C++ extension
import level_set_fusion_optimization as cpp_extension


class MathTest(TestCase):
    def test_mean_vector_length(self):
        vector_field = np.array([[[0.8562016, 0.876527],
                                  [0.8056713, 0.31369442],
                                  [0.28571403, 0.38419583],
                                  [0.86377007, 0.9078812]],

                                 [[0.12255816, 0.22223428],
                                  [0.4487159, 0.7280231],
                                  [0.61369246, 0.43351218],
                                  [0.3545089, 0.33867624]],

                                 [[0.5658683, 0.53506494],
                                  [0.69546276, 0.9331944],
                                  [0.05706289, 0.06915309],
                                  [0.5286004, 0.9154799]],

                                 [[0.98797816, 0.60008055],
                                  [0.07343615, 0.10326899],
                                  [0.28764063, 0.05625961],
                                  [0.32258928, 0.84611595]]], dtype=np.float32)
        lengths = np.linalg.norm(vector_field, axis=2)
        mean_length = cpp_extension.mean_vector_length(vector_field)
        self.assertAlmostEqual(lengths.mean(), mean_length)

    def test_resampling01(self):
        x = np.array([[[1., 2.],
                       [3., 4.]],

                      [[5., 6.],
                       [7., 8.]]], dtype=np.float32)
        up_x = np.array([[[1., 1.25, 1.75, 2.],
                          [1.5, 1.75, 2.25, 2.5],
                          [2.5, 2.75, 3.25, 3.5],
                          [3., 3.25, 3.75, 4.]],

                         [[2., 2.25, 2.75, 3.],
                          [2.5, 2.75, 3.25, 3.5],
                          [3.5, 3.75, 4.25, 4.5],
                          [4., 4.25, 4.75, 5.]],

                         [[4., 4.25, 4.75, 5.],
                          [4.5, 4.75, 5.25, 5.5],
                          [5.5, 5.75, 6.25, 6.5],
                          [6., 6.25, 6.75, 7.]],

                         [[5., 5.25, 5.75, 6.],
                          [5.5, 5.75, 6.25, 6.5],
                          [6.5, 6.75, 7.25, 7.5],
                          [7., 7.25, 7.75, 8.]]])
        self.assertTrue(np.allclose(resampling.upsample2x_linear(x), up_x))
        down_x = np.array([[[2.3125, 2.9375],
                            [3.5625, 4.1875]],

                           [[4.8125, 5.4375],
                            [6.0625, 6.6875]]])
        self.assertTrue(np.allclose(resampling.downsample2x_linear(up_x), down_x))

    def test_resampling02(self):
        y = np.array([[[1., 2., 3.],
                       [4., 5., 6.],
                       [7., 8., 9.]],

                      [[10., 11., 12.],
                       [13., 14., 15.],
                       [16., 17., 18.]],

                      [[19., 20., 21.],
                       [22., 23., 24.],
                       [25., 26., 27.]]], dtype=np.float32)
        up_y = np.array([[[1., 1.25, 1.75, 2.25, 2.75, 3.],
                          [1.75, 2., 2.5, 3., 3.5, 3.75],
                          [3.25, 3.5, 4., 4.5, 5., 5.25],
                          [4.75, 5., 5.5, 6., 6.5, 6.75],
                          [6.25, 6.5, 7., 7.5, 8., 8.25],
                          [7., 7.25, 7.75, 8.25, 8.75, 9.]],

                         [[3.25, 3.5, 4., 4.5, 5., 5.25],
                          [4., 4.25, 4.75, 5.25, 5.75, 6.],
                          [5.5, 5.75, 6.25, 6.75, 7.25, 7.5],
                          [7., 7.25, 7.75, 8.25, 8.75, 9.],
                          [8.5, 8.75, 9.25, 9.75, 10.25, 10.5],
                          [9.25, 9.5, 10., 10.5, 11., 11.25]],

                         [[7.75, 8., 8.5, 9., 9.5, 9.75],
                          [8.5, 8.75, 9.25, 9.75, 10.25, 10.5],
                          [10., 10.25, 10.75, 11.25, 11.75, 12.],
                          [11.5, 11.75, 12.25, 12.75, 13.25, 13.5],
                          [13., 13.25, 13.75, 14.25, 14.75, 15.],
                          [13.75, 14., 14.5, 15., 15.5, 15.75]],

                         [[12.25, 12.5, 13., 13.5, 14., 14.25],
                          [13., 13.25, 13.75, 14.25, 14.75, 15.],
                          [14.5, 14.75, 15.25, 15.75, 16.25, 16.5],
                          [16., 16.25, 16.75, 17.25, 17.75, 18.],
                          [17.5, 17.75, 18.25, 18.75, 19.25, 19.5],
                          [18.25, 18.5, 19., 19.5, 20., 20.25]],

                         [[16.75, 17., 17.5, 18., 18.5, 18.75],
                          [17.5, 17.75, 18.25, 18.75, 19.25, 19.5],
                          [19., 19.25, 19.75, 20.25, 20.75, 21.],
                          [20.5, 20.75, 21.25, 21.75, 22.25, 22.5],
                          [22., 22.25, 22.75, 23.25, 23.75, 24.],
                          [22.75, 23., 23.5, 24., 24.5, 24.75]],

                         [[19., 19.25, 19.75, 20.25, 20.75, 21.],
                          [19.75, 20., 20.5, 21., 21.5, 21.75],
                          [21.25, 21.5, 22., 22.5, 23., 23.25],
                          [22.75, 23., 23.5, 24., 24.5, 24.75],
                          [24.25, 24.5, 25., 25.5, 26., 26.25],
                          [25., 25.25, 25.75, 26.25, 26.75, 27.]]])
        self.assertTrue(np.allclose(resampling.upsample2x_linear(y), up_y))
        down_y = np.array([[[3.4375, 4.25, 5.0625],
                            [5.875, 6.6875, 7.5],
                            [8.3125, 9.125, 9.9375]],

                           [[10.75, 11.5625, 12.375],
                            [13.1875, 14., 14.8125],
                            [15.625, 16.4375, 17.25]],

                           [[18.0625, 18.875, 19.6875],
                            [20.5, 21.3125, 22.125],
                            [22.9375, 23.75, 24.5625]]])
        self.assertTrue(np.allclose(resampling.downsample2x_linear(up_y), down_y))

    def test_resampling03(self):
        t = np.array([[[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]],

                      [[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]],

                      [[1., 2., 3., 4.],
                       [1., 2., 3., 4.],
                       [1., 2., 3., 4.]]])

        up_t = np.array([[[1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.]],

                         [[1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.]],

                         [[1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.]],

                         [[1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.]],

                         [[1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.]],

                         [[1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.],
                          [1., 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.]]])

        self.assertTrue(np.allclose(resampling.upsample2x_linear(t), up_t))

        down_t = np.array([[[1.1875, 2., 3., 3.8125],
                            [1.1875, 2., 3., 3.8125],
                            [1.1875, 2., 3., 3.8125]],

                           [[1.1875, 2., 3., 3.8125],
                            [1.1875, 2., 3., 3.8125],
                            [1.1875, 2., 3., 3.8125]],

                           [[1.1875, 2., 3., 3.8125],
                            [1.1875, 2., 3., 3.8125],
                            [1.1875, 2., 3., 3.8125]]])
        self.assertTrue(np.allclose(resampling.downsample2x_linear(up_t), down_t))